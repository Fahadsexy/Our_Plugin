   No.   File  Line   Col. Cls.  Mthd.  Rep.  Tok.     Text
     0     0     1     1    -1    -1     0     121  STARTFILE D:\javasrc\java\nio\ByteBufferAsCharBufferB.java
     1     0    28     1    -1    -1     0       5  package
     2     0    28     9    -1    -1     0     111  java.nio
     3     0    28    17    -1    -1     0     102  ;
     4     0    31     1     0    -1     0     122  STARTCLASS
     5     0    31     1     0    -1     0      24  class
     6     0    31     7     0    -1     0     111  ByteBufferAsCharBufferB
     7     0    32     5     0    -1     0      38  extends
     8     0    32    13     0    -1     0     111  CharBuffer
     9     0    33     1     0    -1     0      63  {
    10     0    37     5     0    -1     0      23  protected
    11     0    37    15     0    -1     0       6  final
    12     0    37    21     0    -1     0     111  ByteBuffer
    13     0    37    32     0    -1     0     111  bb
    14     0    37    34     0    -1     0     102  ;
    15     0    38     5     0    -1     0      23  protected
    16     0    38    15     0    -1     0       6  final
    17     0    38    21     0    -1     0      36  int
    18     0    38    25     0    -1     0     111  offset
    19     0    38    31     0    -1     0     102  ;
    20     0    38    31     0     0     0     123  STARTMETHOD
    21     0    42     5     0     0     0     111  ByteBufferAsCharBufferB
    22     0    42    28     0     0     0      59  (
    23     0    42    29     0     0     0     111  ByteBuffer
    24     0    42    40     0     0     0     111  bb
    25     0    42    42     0     0     0      60  )
    26     0    42    44     0     0     0      63  {
    27     0    44     9     0     0     0      27  super
    28     0    44    14     0     0     0      59  (
    29     0    44    15     0     0     0      77  -
    30     0    44    16     0     0     0     112  1
    31     0    44    17     0     0     0      66  ,
    32     0    44    19     0     0     0     112  0
    33     0    44    20     0     0     0      66  ,
    34     0    45    15     0     0     0     111  bb.remaining
    35     0    45    27     0     0     0      59  (
    36     0    45    28     0     0     0      60  )
    37     0    45    30     0     0     0      84  >>
    38     0    45    33     0     0     0     112  1
    39     0    45    34     0     0     0      66  ,
    40     0    46    15     0     0     0     111  bb.remaining
    41     0    46    27     0     0     0      59  (
    42     0    46    28     0     0     0      60  )
    43     0    46    30     0     0     0      84  >>
    44     0    46    33     0     0     0     112  1
    45     0    46    34     0     0     0      60  )
    46     0    46    35     0     0     0     102  ;
    47     0    47     9     0     0     0     111  this.bb
    48     0    47    17     0     0     0      67  =
    49     0    47    19     0     0     0     111  bb
    50     0    47    21     0     0     0     102  ;
    51     0    49     9     0     0     0      36  int
    52     0    49    13     0     0     0     111  cap
    53     0    49    17     0     0     0      67  =
    54     0    49    19     0     0     0     111  this.capacity
    55     0    49    32     0     0     0      59  (
    56     0    49    33     0     0     0      60  )
    57     0    49    34     0     0     0     102  ;
    58     0    50     9     0     0     0     111  this.limit
    59     0    50    19     0     0     0      59  (
    60     0    50    20     0     0     0     111  cap
    61     0    50    23     0     0     0      60  )
    62     0    50    24     0     0     0     102  ;
    63     0    51     9     0     0     0      36  int
    64     0    51    13     0     0     0     111  pos
    65     0    51    17     0     0     0      67  =
    66     0    51    19     0     0     0     111  this.position
    67     0    51    32     0     0     0      59  (
    68     0    51    33     0     0     0      60  )
    69     0    51    34     0     0     0     102  ;
    70     0    52     9     0     0     0     111  assert
    71     0    52    16     0     0     0      59  (
    72     0    52    17     0     0     0     111  pos
    73     0    52    21     0     0     0      92  <=
    74     0    52    24     0     0     0     111  cap
    75     0    52    27     0     0     0      60  )
    76     0    52    28     0     0     0     102  ;
    77     0    53     9     0     0     0     111  offset
    78     0    53    16     0     0     0      67  =
    79     0    53    18     0     0     0     111  pos
    80     0    53    21     0     0     0     102  ;
    81     0    57     5     0     0     0      64  }
    82     0    57     5     0     0     0     124  ENDMETHOD
    83     0    57     5     0     1     0     125  STARTMETHOD
    84     0    59     5     0     1     0     111  ByteBufferAsCharBufferB
    85     0    59    28     0     1     0      59  (
    86     0    59    29     0     1     0     111  ByteBuffer
    87     0    59    40     0     1     0     111  bb
    88     0    59    42     0     1     0      66  ,
    89     0    60    38     0     1     0      36  int
    90     0    60    42     0     1     0     111  mark
    91     0    60    46     0     1     0      66  ,
    92     0    60    48     0     1     0      36  int
    93     0    60    52     0     1     0     111  pos
    94     0    60    55     0     1     0      66  ,
    95     0    60    57     0     1     0      36  int
    96     0    60    61     0     1     0     111  lim
    97     0    60    64     0     1     0      66  ,
    98     0    60    66     0     1     0      36  int
    99     0    60    70     0     1     0     111  cap
   100     0    60    73     0     1     0      66  ,
   101     0    61    38     0     1     0      36  int
   102     0    61    42     0     1     0     111  off
   103     0    61    45     0     1     0      60  )
   104     0    62     5     0     1     0      63  {
   105     0    64     9     0     1     0      27  super
   106     0    64    14     0     1     0      59  (
   107     0    64    15     0     1     0     111  mark
   108     0    64    19     0     1     0      66  ,
   109     0    64    21     0     1     0     111  pos
   110     0    64    24     0     1     0      66  ,
   111     0    64    26     0     1     0     111  lim
   112     0    64    29     0     1     0      66  ,
   113     0    64    31     0     1     0     111  cap
   114     0    64    34     0     1     0      60  )
   115     0    64    35     0     1     0     102  ;
   116     0    65     9     0     1     1     111  this.bb
   117     0    65    17     0     1     1      67  =
   118     0    65    19     0     1     1     111  bb
   119     0    65    21     0     1     1     102  ;
   120     0    66     9     0     1     1     111  offset
   121     0    66    16     0     1     1      67  =
   122     0    66    18     0     1     1     111  off
   123     0    66    21     0     1     1     102  ;
   124     0    70     5     0     1     0      64  }
   125     0    70     5     0     1     0     126  ENDMETHOD
   126     0    70     5     0     2     0     127  STARTMETHOD
   127     0    72     5     0     2     0      10  public
   128     0    72    12     0     2     0     111  CharBuffer
   129     0    72    23     0     2     0     111  slice
   130     0    72    28     0     2     0      59  (
   131     0    72    29     0     2     0      60  )
   132     0    72    31     0     2     0      63  {
   133     0    73     9     0     2     1      36  int
   134     0    73    13     0     2     1     111  pos
   135     0    73    17     0     2     1      67  =
   136     0    73    19     0     2     1     111  this.position
   137     0    73    32     0     2     1      59  (
   138     0    73    33     0     2     1      60  )
   139     0    73    34     0     2     1     102  ;
   140     0    74     9     0     2     1      36  int
   141     0    74    13     0     2     1     111  lim
   142     0    74    17     0     2     1      67  =
   143     0    74    19     0     2     1     111  this.limit
   144     0    74    29     0     2     1      59  (
   145     0    74    30     0     2     1      60  )
   146     0    74    31     0     2     1     102  ;
   147     0    75     9     0     2     0     111  assert
   148     0    75    16     0     2     0      59  (
   149     0    75    17     0     2     0     111  pos
   150     0    75    21     0     2     0      92  <=
   151     0    75    24     0     2     0     111  lim
   152     0    75    27     0     2     0      60  )
   153     0    75    28     0     2     0     102  ;
   154     0    76     9     0     2     0      36  int
   155     0    76    13     0     2     0     111  rem
   156     0    76    17     0     2     0      67  =
   157     0    76    19     0     2     0      59  (
   158     0    76    20     0     2     0     111  pos
   159     0    76    24     0     2     0      92  <=
   160     0    76    27     0     2     0     111  lim
   161     0    76    31     0     2     0      58  ?
   162     0    76    33     0     2     0     111  lim
   163     0    76    37     0     2     0      77  -
   164     0    76    39     0     2     0     111  pos
   165     0    76    43     0     2     0      65  :
   166     0    76    45     0     2     0     112  0
   167     0    76    46     0     2     0      60  )
   168     0    76    47     0     2     0     102  ;
   169     0    77     9     0     2     0      36  int
   170     0    77    13     0     2     0     111  off
   171     0    77    17     0     2     0      67  =
   172     0    77    19     0     2     0      59  (
   173     0    77    20     0     2     0     111  pos
   174     0    77    24     0     2     0      90  <<
   175     0    77    27     0     2     0     112  1
   176     0    77    28     0     2     0      60  )
   177     0    77    30     0     2     0      74  +
   178     0    77    32     0     2     0     111  offset
   179     0    77    38     0     2     0     102  ;
   180     0    78     9     0     2     0     111  assert
   181     0    78    16     0     2     0      59  (
   182     0    78    17     0     2     0     111  off
   183     0    78    21     0     2     0      88  >=
   184     0    78    24     0     2     0     112  0
   185     0    78    25     0     2     0      60  )
   186     0    78    26     0     2     0     102  ;
   187     0    79     9     0     2     0      19  return
   188     0    79    16     0     2     0      15  new
   189     0    79    20     0     2     0     111  ByteBufferAsCharBufferB
   190     0    79    43     0     2     0      59  (
   191     0    79    44     0     2     0     111  bb
   192     0    79    46     0     2     0      66  ,
   193     0    79    48     0     2     0      77  -
   194     0    79    49     0     2     0     112  1
   195     0    79    50     0     2     0      66  ,
   196     0    79    52     0     2     0     112  0
   197     0    79    53     0     2     0      66  ,
   198     0    79    55     0     2     0     111  rem
   199     0    79    58     0     2     0      66  ,
   200     0    79    60     0     2     0     111  rem
   201     0    79    63     0     2     1      66  ,
   202     0    79    65     0     2     1     111  off
   203     0    79    68     0     2     1      60  )
   204     0    79    69     0     2     1     102  ;
   205     0    80     5     0     2     1      64  }
   206     0    80     5     0     2     0     128  ENDMETHOD
   207     0    80     5     0     3     0     129  STARTMETHOD
   208     0    82     5     0     3     0      10  public
   209     0    82    12     0     3     0     111  CharBuffer
   210     0    82    23     0     3     0     111  duplicate
   211     0    82    32     0     3     0      59  (
   212     0    82    33     0     3     0      60  )
   213     0    82    35     0     3     0      63  {
   214     0    83     9     0     3     0      19  return
   215     0    83    16     0     3     0      15  new
   216     0    83    20     0     3     0     111  ByteBufferAsCharBufferB
   217     0    83    43     0     3     0      59  (
   218     0    83    44     0     3     0     111  bb
   219     0    83    46     0     3     0      66  ,
   220     0    84    53     0     3     1     111  this.markValue
   221     0    84    67     0     3     1      59  (
   222     0    84    68     0     3     1      60  )
   223     0    84    69     0     3     1      66  ,
   224     0    85    53     0     3     1     111  this.position
   225     0    85    66     0     3     1      59  (
   226     0    85    67     0     3     1      60  )
   227     0    85    68     0     3     1      66  ,
   228     0    86    53     0     3     1     111  this.limit
   229     0    86    63     0     3     1      59  (
   230     0    86    64     0     3     1      60  )
   231     0    86    65     0     3     1      66  ,
   232     0    87    53     0     3     1     111  this.capacity
   233     0    87    66     0     3     1      59  (
   234     0    87    67     0     3     1      60  )
   235     0    87    68     0     3     1      66  ,
   236     0    88    53     0     3     1     111  offset
   237     0    88    59     0     3     1      60  )
   238     0    88    60     0     3     1     102  ;
   239     0    89     5     0     3     1      64  }
   240     0    89     5     0     3     0     130  ENDMETHOD
   241     0    89     5     0     4     0     131  STARTMETHOD
   242     0    91     5     0     4     0      10  public
   243     0    91    12     0     4     0     111  CharBuffer
   244     0    91    23     0     4     0     111  asReadOnlyBuffer
   245     0    91    39     0     4     0      59  (
   246     0    91    40     0     4     0      60  )
   247     0    91    42     0     4     0      63  {
   248     0    93     9     0     4     0      19  return
   249     0    93    16     0     4     0      15  new
   250     0    93    20     0     4     0     111  ByteBufferAsCharBufferRB
   251     0    93    44     0     4     0      59  (
   252     0    93    45     0     4     0     111  bb
   253     0    93    47     0     4     0      66  ,
   254     0    94    50     0     4     1     111  this.markValue
   255     0    94    64     0     4     1      59  (
   256     0    94    65     0     4     1      60  )
   257     0    94    66     0     4     1      66  ,
   258     0    95    50     0     4     1     111  this.position
   259     0    95    63     0     4     1      59  (
   260     0    95    64     0     4     1      60  )
   261     0    95    65     0     4     1      66  ,
   262     0    96    50     0     4     1     111  this.limit
   263     0    96    60     0     4     1      59  (
   264     0    96    61     0     4     1      60  )
   265     0    96    62     0     4     1      66  ,
   266     0    97    50     0     4     1     111  this.capacity
   267     0    97    63     0     4     1      59  (
   268     0    97    64     0     4     1      60  )
   269     0    97    65     0     4     1      66  ,
   270     0    98    50     0     4     1     111  offset
   271     0    98    56     0     4     1      60  )
   272     0    98    57     0     4     1     102  ;
   273     0   102     5     0     4     1      64  }
   274     0   102     5     0     4     0     132  ENDMETHOD
   275     0   102     5     0     5     0     133  STARTMETHOD
   276     0   106     5     0     5     0      23  protected
   277     0   106    15     0     5     0      36  int
   278     0   106    19     0     5     0     111  ix
   279     0   106    21     0     5     0      59  (
   280     0   106    22     0     5     0      36  int
   281     0   106    26     0     5     0     111  i
   282     0   106    27     0     5     0      60  )
   283     0   106    29     0     5     0      63  {
   284     0   107     9     0     5     0      19  return
   285     0   107    16     0     5     0      59  (
   286     0   107    17     0     5     0     111  i
   287     0   107    19     0     5     0      90  <<
   288     0   107    22     0     5     0     112  1
   289     0   107    23     0     5     0      60  )
   290     0   107    25     0     5     0      74  +
   291     0   107    27     0     5     0     111  offset
   292     0   107    33     0     5     0     102  ;
   293     0   108     5     0     5     0      64  }
   294     0   108     5     0     5     0     134  ENDMETHOD
   295     0   108     5     0     6     0     135  STARTMETHOD
   296     0   110     5     0     6     0      10  public
   297     0   110    12     0     6     0      40  char
   298     0   110    17     0     6     0     111  get
   299     0   110    20     0     6     0      59  (
   300     0   110    21     0     6     0      60  )
   301     0   110    23     0     6     0      63  {
   302     0   111     9     0     6     0      19  return
   303     0   111    16     0     6     0     111  Bits.getCharB
   304     0   111    29     0     6     0      59  (
   305     0   111    30     0     6     0     111  bb
   306     0   111    32     0     6     0      66  ,
   307     0   111    34     0     6     0     111  ix
   308     0   111    36     0     6     0      59  (
   309     0   111    37     0     6     0     111  nextGetIndex
   310     0   111    49     0     6     0      59  (
   311     0   111    50     0     6     0      60  )
   312     0   111    51     0     6     0      60  )
   313     0   111    52     0     6     0      60  )
   314     0   111    53     0     6     0     102  ;
   315     0   112     5     0     6     0      64  }
   316     0   112     5     0     6     0     136  ENDMETHOD
   317     0   112     5     0     7     0     137  STARTMETHOD
   318     0   114     5     0     7     0      10  public
   319     0   114    12     0     7     0      40  char
   320     0   114    17     0     7     0     111  get
   321     0   114    20     0     7     0      59  (
   322     0   114    21     0     7     0      36  int
   323     0   114    25     0     7     0     111  i
   324     0   114    26     0     7     0      60  )
   325     0   114    28     0     7     0      63  {
   326     0   115     9     0     7     0      19  return
   327     0   115    16     0     7     0     111  Bits.getCharB
   328     0   115    29     0     7     0      59  (
   329     0   115    30     0     7     0     111  bb
   330     0   115    32     0     7     0      66  ,
   331     0   115    34     0     7     0     111  ix
   332     0   115    36     0     7     0      59  (
   333     0   115    37     0     7     0     111  checkIndex
   334     0   115    47     0     7     0      59  (
   335     0   115    48     0     7     0     111  i
   336     0   115    49     0     7     0      60  )
   337     0   115    50     0     7     0      60  )
   338     0   115    51     0     7     0      60  )
   339     0   115    52     0     7     0     102  ;
   340     0   116     5     0     7     0      64  }
   341     0   116     5     0     7     0     138  ENDMETHOD
   342     0   116     5     0     8     0     139  STARTMETHOD
   343     0   120     5     0     8     0      10  public
   344     0   120    12     0     8     0     111  CharBuffer
   345     0   120    23     0     8     0     111  put
   346     0   120    26     0     8     0      59  (
   347     0   120    27     0     8     0      40  char
   348     0   120    32     0     8     0     111  x
   349     0   120    33     0     8     0      60  )
   350     0   120    35     0     8     0      63  {
   351     0   122     9     0     8     0     111  Bits.putCharB
   352     0   122    22     0     8     0      59  (
   353     0   122    23     0     8     0     111  bb
   354     0   122    25     0     8     0      66  ,
   355     0   122    27     0     8     0     111  ix
   356     0   122    29     0     8     0      59  (
   357     0   122    30     0     8     0     111  nextPutIndex
   358     0   122    42     0     8     0      59  (
   359     0   122    43     0     8     0      60  )
   360     0   122    44     0     8     0      60  )
   361     0   122    45     0     8     0      66  ,
   362     0   122    47     0     8     0     111  x
   363     0   122    48     0     8     0      60  )
   364     0   122    49     0     8     0     102  ;
   365     0   123     9     0     8     0      19  return
   366     0   123    16     0     8     0      44  this
   367     0   123    20     0     8     0     102  ;
   368     0   127     5     0     8     0      64  }
   369     0   127     5     0     8     0     140  ENDMETHOD
   370     0   127     5     0     9     0     141  STARTMETHOD
   371     0   129     5     0     9     0      10  public
   372     0   129    12     0     9     0     111  CharBuffer
   373     0   129    23     0     9     0     111  put
   374     0   129    26     0     9     0      59  (
   375     0   129    27     0     9     0      36  int
   376     0   129    31     0     9     0     111  i
   377     0   129    32     0     9     0      66  ,
   378     0   129    34     0     9     0      40  char
   379     0   129    39     0     9     0     111  x
   380     0   129    40     0     9     0      60  )
   381     0   129    42     0     9     0      63  {
   382     0   131     9     0     9     0     111  Bits.putCharB
   383     0   131    22     0     9     0      59  (
   384     0   131    23     0     9     0     111  bb
   385     0   131    25     0     9     0      66  ,
   386     0   131    27     0     9     0     111  ix
   387     0   131    29     0     9     0      59  (
   388     0   131    30     0     9     0     111  checkIndex
   389     0   131    40     0     9     0      59  (
   390     0   131    41     0     9     0     111  i
   391     0   131    42     0     9     0      60  )
   392     0   131    43     0     9     0      60  )
   393     0   131    44     0     9     0      66  ,
   394     0   131    46     0     9     0     111  x
   395     0   131    47     0     9     0      60  )
   396     0   131    48     0     9     0     102  ;
   397     0   132     9     0     9     0      19  return
   398     0   132    16     0     9     0      44  this
   399     0   132    20     0     9     0     102  ;
   400     0   136     5     0     9     0      64  }
   401     0   136     5     0     9     0     142  ENDMETHOD
   402     0   136     5     0    10     0     143  STARTMETHOD
   403     0   138     5     0    10     0      10  public
   404     0   138    12     0    10     0     111  CharBuffer
   405     0   138    23     0    10     0     111  compact
   406     0   138    30     0    10     0      59  (
   407     0   138    31     0    10     0      60  )
   408     0   138    33     0    10     0      63  {
   409     0   140     9     0    10     1      36  int
   410     0   140    13     0    10     1     111  pos
   411     0   140    17     0    10     1      67  =
   412     0   140    19     0    10     1     111  position
   413     0   140    27     0    10     1      59  (
   414     0   140    28     0    10     1      60  )
   415     0   140    29     0    10     1     102  ;
   416     0   141     9     0    10     1      36  int
   417     0   141    13     0    10     1     111  lim
   418     0   141    17     0    10     1      67  =
   419     0   141    19     0    10     1     111  limit
   420     0   141    24     0    10     1      59  (
   421     0   141    25     0    10     1      60  )
   422     0   141    26     0    10     1     102  ;
   423     0   142     9     0    10     0     111  assert
   424     0   142    16     0    10     0      59  (
   425     0   142    17     0    10     0     111  pos
   426     0   142    21     0    10     0      92  <=
   427     0   142    24     0    10     0     111  lim
   428     0   142    27     0    10     0      60  )
   429     0   142    28     0    10     0     102  ;
   430     0   143     9     0    10     0      36  int
   431     0   143    13     0    10     0     111  rem
   432     0   143    17     0    10     0      67  =
   433     0   143    19     0    10     0      59  (
   434     0   143    20     0    10     0     111  pos
   435     0   143    24     0    10     0      92  <=
   436     0   143    27     0    10     0     111  lim
   437     0   143    31     0    10     0      58  ?
   438     0   143    33     0    10     0     111  lim
   439     0   143    37     0    10     0      77  -
   440     0   143    39     0    10     0     111  pos
   441     0   143    43     0    10     0      65  :
   442     0   143    45     0    10     0     112  0
   443     0   143    46     0    10     0      60  )
   444     0   143    47     0    10     0     102  ;
   445     0   145     9     0    10     0     111  ByteBuffer
   446     0   145    20     0    10     0     111  db
   447     0   145    23     0    10     0      67  =
   448     0   145    25     0    10     0     111  bb.duplicate
   449     0   145    37     0    10     0      59  (
   450     0   145    38     0    10     0      60  )
   451     0   145    39     0    10     0     102  ;
   452     0   146     9     0    10     0     111  db.limit
   453     0   146    17     0    10     0      59  (
   454     0   146    18     0    10     0     111  ix
   455     0   146    20     0    10     0      59  (
   456     0   146    21     0    10     0     111  lim
   457     0   146    24     0    10     0      60  )
   458     0   146    25     0    10     0      60  )
   459     0   146    26     0    10     0     102  ;
   460     0   147     9     0    10     0     111  db.position
   461     0   147    20     0    10     0      59  (
   462     0   147    21     0    10     0     111  ix
   463     0   147    23     0    10     0      59  (
   464     0   147    24     0    10     0     112  0
   465     0   147    25     0    10     0      60  )
   466     0   147    26     0    10     0      60  )
   467     0   147    27     0    10     0     102  ;
   468     0   148     9     0    10     0     111  ByteBuffer
   469     0   148    20     0    10     0     111  sb
   470     0   148    23     0    10     0      67  =
   471     0   148    25     0    10     0     111  db.slice
   472     0   148    33     0    10     0      59  (
   473     0   148    34     0    10     0      60  )
   474     0   148    35     0    10     0     102  ;
   475     0   149     9     0    10     0     111  sb.position
   476     0   149    20     0    10     0      59  (
   477     0   149    21     0    10     0     111  pos
   478     0   149    25     0    10     0      90  <<
   479     0   149    28     0    10     0     112  1
   480     0   149    29     0    10     0      60  )
   481     0   149    30     0    10     0     102  ;
   482     0   150     9     0    10     0     111  sb.compact
   483     0   150    19     0    10     0      59  (
   484     0   150    20     0    10     0      60  )
   485     0   150    21     0    10     0     102  ;
   486     0   151     9     0    10     0     111  position
   487     0   151    17     0    10     0      59  (
   488     0   151    18     0    10     0     111  rem
   489     0   151    21     0    10     0      60  )
   490     0   151    22     0    10     0     102  ;
   491     0   152     9     0    10     0     111  limit
   492     0   152    14     0    10     0      59  (
   493     0   152    15     0    10     0     111  capacity
   494     0   152    23     0    10     0      59  (
   495     0   152    24     0    10     0      60  )
   496     0   152    25     0    10     0      60  )
   497     0   152    26     0    10     0     102  ;
   498     0   153     9     0    10     0      19  return
   499     0   153    16     0    10     0      44  this
   500     0   153    20     0    10     0     102  ;
   501     0   157     5     0    10     0      64  }
   502     0   157     5     0    10     0     144  ENDMETHOD
   503     0   157     5     0    11     0     145  STARTMETHOD
   504     0   159     5     0    11     0      10  public
   505     0   159    12     0    11     0      39  boolean
   506     0   159    20     0    11     0     111  isDirect
   507     0   159    28     0    11     0      59  (
   508     0   159    29     0    11     0      60  )
   509     0   159    31     0    11     0      63  {
   510     0   160     9     0    11     0      19  return
   511     0   160    16     0    11     0     111  bb.isDirect
   512     0   160    27     0    11     0      59  (
   513     0   160    28     0    11     0      60  )
   514     0   160    29     0    11     0     102  ;
   515     0   161     5     0    11     0      64  }
   516     0   161     5     0    11     0     146  ENDMETHOD
   517     0   161     5     0    12     0     147  STARTMETHOD
   518     0   163     5     0    12     0      10  public
   519     0   163    12     0    12     0      39  boolean
   520     0   163    20     0    12     0     111  isReadOnly
   521     0   163    30     0    12     0      59  (
   522     0   163    31     0    12     0      60  )
   523     0   163    33     0    12     0      63  {
   524     0   164     9     0    12     0      19  return
   525     0   164    16     0    12     0      43  false
   526     0   164    21     0    12     0     102  ;
   527     0   165     5     0    12     0      64  }
   528     0   165     5     0    12     0     148  ENDMETHOD
   529     0   165     5     0    13     0     149  STARTMETHOD
   530     0   169     5     0    13     0      10  public
   531     0   169    12     0    13     0     111  String
   532     0   169    19     0    13     0     111  toString
   533     0   169    27     0    13     0      59  (
   534     0   169    28     0    13     0      36  int
   535     0   169    32     0    13     0     111  start
   536     0   169    37     0    13     0      66  ,
   537     0   169    39     0    13     0      36  int
   538     0   169    43     0    13     0     111  end
   539     0   169    46     0    13     0      60  )
   540     0   169    48     0    13     0      63  {
   541     0   170     9     0    13     0      31  if
   542     0   170    12     0    13     0      59  (
   543     0   170    13     0    13     0      59  (
   544     0   170    14     0    13     0     111  end
   545     0   170    18     0    13     0      89  >
   546     0   170    20     0    13     0     111  limit
   547     0   170    25     0    13     0      59  (
   548     0   170    26     0    13     0      60  )
   549     0   170    27     0    13     0      60  )
   550     0   170    29     0    13     0      98  ||
   551     0   170    32     0    13     0      59  (
   552     0   170    33     0    13     0     111  start
   553     0   170    39     0    13     0      89  >
   554     0   170    41     0    13     0     111  end
   555     0   170    44     0    13     0      60  )
   556     0   170    45     0    13     0      60  )
   557     0   171    13     0    13     0      20  throw
   558     0   171    19     0    13     0      15  new
   559     0   171    23     0    13     0     111  IndexOutOfBoundsException
   560     0   171    48     0    13     0      59  (
   561     0   171    49     0    13     0      60  )
   562     0   171    50     0    13     0     102  ;
   563     0   172     9     0    13     0      35  try
   564     0   172    13     0    13     0      63  {
   565     0   173    13     0    13     0      36  int
   566     0   173    17     0    13     0     111  len
   567     0   173    21     0    13     0      67  =
   568     0   173    23     0    13     0     111  end
   569     0   173    27     0    13     0      77  -
   570     0   173    29     0    13     0     111  start
   571     0   173    34     0    13     0     102  ;
   572     0   174    13     0    13     0      40  char
   573     0   174    17     0    13     0      61  [
   574     0   174    18     0    13     0      62  ]
   575     0   174    20     0    13     0     111  ca
   576     0   174    23     0    13     0      67  =
   577     0   174    25     0    13     0      15  new
   578     0   174    29     0    13     0      40  char
   579     0   174    33     0    13     0      61  [
   580     0   174    34     0    13     0     111  len
   581     0   174    37     0    13     0      62  ]
   582     0   174    38     0    13     0     102  ;
   583     0   175    13     0    13     0     111  CharBuffer
   584     0   175    24     0    13     0     111  cb
   585     0   175    27     0    13     0      67  =
   586     0   175    29     0    13     0     111  CharBuffer.wrap
   587     0   175    44     0    13     0      59  (
   588     0   175    45     0    13     0     111  ca
   589     0   175    47     0    13     0      60  )
   590     0   175    48     0    13     0     102  ;
   591     0   176    13     0    13     0     111  CharBuffer
   592     0   176    24     0    13     0     111  db
   593     0   176    27     0    13     0      67  =
   594     0   176    29     0    13     0     111  this.duplicate
   595     0   176    43     0    13     0      59  (
   596     0   176    44     0    13     0      60  )
   597     0   176    45     0    13     0     102  ;
   598     0   177    13     0    13     1     111  db.position
   599     0   177    24     0    13     1      59  (
   600     0   177    25     0    13     1     111  start
   601     0   177    30     0    13     1      60  )
   602     0   177    31     0    13     1     102  ;
   603     0   178    13     0    13     1     111  db.limit
   604     0   178    21     0    13     1      59  (
   605     0   178    22     0    13     1     111  end
   606     0   178    25     0    13     1      60  )
   607     0   178    26     0    13     1     102  ;
   608     0   179    13     0    13     1     111  cb.put
   609     0   179    19     0    13     1      59  (
   610     0   179    20     0    13     1     111  db
   611     0   179    22     0    13     1      60  )
   612     0   179    23     0    13     1     102  ;
   613     0   180    13     0    13     0      19  return
   614     0   180    20     0    13     0      15  new
   615     0   180    24     0    13     0     111  String
   616     0   180    30     0    13     0      59  (
   617     0   180    31     0    13     0     111  ca
   618     0   180    33     0    13     0      60  )
   619     0   180    34     0    13     0     102  ;
   620     0   181     9     0    13     0      64  }
   621     0   181    11     0    13     0      34  catch
   622     0   181    17     0    13     0      59  (
   623     0   181    18     0    13     0     111  StringIndexOutOfBoundsException
   624     0   181    50     0    13     0     111  x
   625     0   181    51     0    13     0      60  )
   626     0   181    53     0    13     0      63  {
   627     0   182    13     0    13     0      20  throw
   628     0   182    19     0    13     0      15  new
   629     0   182    23     0    13     0     111  IndexOutOfBoundsException
   630     0   182    48     0    13     0      59  (
   631     0   182    49     0    13     0      60  )
   632     0   182    50     0    13     0     102  ;
   633     0   183     9     0    13     0      64  }
   634     0   184     5     0    13     0      64  }
   635     0   184     5     0    13     0     150  ENDMETHOD
   636     0   184     5     0    14     0     151  STARTMETHOD
   637     0   189     5     0    14     0      10  public
   638     0   189    12     0    14     0     111  CharSequence
   639     0   189    25     0    14     0     111  subSequence
   640     0   189    36     0    14     0      59  (
   641     0   189    37     0    14     0      36  int
   642     0   189    41     0    14     0     111  start
   643     0   189    46     0    14     0      66  ,
   644     0   189    48     0    14     0      36  int
   645     0   189    52     0    14     0     111  end
   646     0   189    55     0    14     0      60  )
   647     0   189    57     0    14     0      63  {
   648     0   190     9     0    14     1      36  int
   649     0   190    13     0    14     1     111  pos
   650     0   190    17     0    14     1      67  =
   651     0   190    19     0    14     1     111  position
   652     0   190    27     0    14     1      59  (
   653     0   190    28     0    14     1      60  )
   654     0   190    29     0    14     1     102  ;
   655     0   191     9     0    14     1      36  int
   656     0   191    13     0    14     1     111  lim
   657     0   191    17     0    14     1      67  =
   658     0   191    19     0    14     1     111  limit
   659     0   191    24     0    14     1      59  (
   660     0   191    25     0    14     1      60  )
   661     0   191    26     0    14     1     102  ;
   662     0   192     9     0    14     0     111  assert
   663     0   192    16     0    14     0      59  (
   664     0   192    17     0    14     0     111  pos
   665     0   192    21     0    14     0      92  <=
   666     0   192    24     0    14     0     111  lim
   667     0   192    27     0    14     0      60  )
   668     0   192    28     0    14     0     102  ;
   669     0   193     9     0    14     0     111  pos
   670     0   193    13     0    14     0      67  =
   671     0   193    15     0    14     0      59  (
   672     0   193    16     0    14     0     111  pos
   673     0   193    20     0    14     0      92  <=
   674     0   193    23     0    14     0     111  lim
   675     0   193    27     0    14     0      58  ?
   676     0   193    29     0    14     0     111  pos
   677     0   193    33     0    14     0      65  :
   678     0   193    35     0    14     0     111  lim
   679     0   193    38     0    14     0      60  )
   680     0   193    39     0    14     0     102  ;
   681     0   194     9     0    14     0      36  int
   682     0   194    13     0    14     0     111  len
   683     0   194    17     0    14     0      67  =
   684     0   194    19     0    14     0     111  lim
   685     0   194    23     0    14     0      77  -
   686     0   194    25     0    14     0     111  pos
   687     0   194    28     0    14     0     102  ;
   688     0   196     9     0    14     0      31  if
   689     0   196    12     0    14     0      59  (
   690     0   196    13     0    14     0      59  (
   691     0   196    14     0    14     0     111  start
   692     0   196    20     0    14     0      93  <
   693     0   196    22     0    14     0     112  0
   694     0   196    23     0    14     0      60  )
   695     0   196    25     0    14     0      98  ||
   696     0   196    28     0    14     0      59  (
   697     0   196    29     0    14     0     111  end
   698     0   196    33     0    14     0      89  >
   699     0   196    35     0    14     0     111  len
   700     0   196    38     0    14     0      60  )
   701     0   196    40     0    14     0      98  ||
   702     0   196    43     0    14     0      59  (
   703     0   196    44     0    14     0     111  start
   704     0   196    50     0    14     0      89  >
   705     0   196    52     0    14     0     111  end
   706     0   196    55     0    14     0      60  )
   707     0   196    56     0    14     0      60  )
   708     0   197    13     0    14     0      20  throw
   709     0   197    19     0    14     0      15  new
   710     0   197    23     0    14     0     111  IndexOutOfBoundsException
   711     0   197    48     0    14     0      59  (
   712     0   197    49     0    14     0      60  )
   713     0   197    50     0    14     0     102  ;
   714     0   198     9     0    14     0      36  int
   715     0   198    13     0    14     0     111  sublen
   716     0   198    20     0    14     0      67  =
   717     0   198    22     0    14     0     111  end
   718     0   198    26     0    14     0      77  -
   719     0   198    28     0    14     0     111  start
   720     0   198    33     0    14     0     102  ;
   721     0   199     9     0    14     0      36  int
   722     0   199    13     0    14     0     111  off
   723     0   199    17     0    14     0      67  =
   724     0   199    19     0    14     0     111  offset
   725     0   199    26     0    14     0      74  +
   726     0   199    28     0    14     0      59  (
   727     0   199    29     0    14     0      59  (
   728     0   199    30     0    14     0     111  pos
   729     0   199    34     0    14     0      74  +
   730     0   199    36     0    14     0     111  start
   731     0   199    41     0    14     0      60  )
   732     0   199    43     0    14     0      90  <<
   733     0   199    46     0    14     0     112  1
   734     0   199    47     0    14     0      60  )
   735     0   199    48     0    14     0     102  ;
   736     0   200     9     0    14     0     111  assert
   737     0   200    16     0    14     0      59  (
   738     0   200    17     0    14     0     111  off
   739     0   200    21     0    14     0      88  >=
   740     0   200    24     0    14     0     112  0
   741     0   200    25     0    14     0      60  )
   742     0   200    26     0    14     0     102  ;
   743     0   201     9     0    14     0      19  return
   744     0   201    16     0    14     0      15  new
   745     0   201    20     0    14     0     111  ByteBufferAsCharBufferB
   746     0   201    43     0    14     0      59  (
   747     0   201    44     0    14     0     111  bb
   748     0   201    46     0    14     0      66  ,
   749     0   201    48     0    14     0      77  -
   750     0   201    49     0    14     0     112  1
   751     0   201    50     0    14     0      66  ,
   752     0   201    52     0    14     0     112  0
   753     0   201    53     0    14     0      66  ,
   754     0   201    55     0    14     0     111  sublen
   755     0   201    61     0    14     0      66  ,
   756     0   201    63     0    14     0     111  sublen
   757     0   201    69     0    14     0      66  ,
   758     0   201    71     0    14     0     111  off
   759     0   201    74     0    14     0      60  )
   760     0   201    75     0    14     0     102  ;
   761     0   202     5     0    14     0      64  }
   762     0   202     5     0    14     0     152  ENDMETHOD
   763     0   202     5     0    15     0     153  STARTMETHOD
   764     0   207     5     0    15     0      10  public
   765     0   207    12     0    15     0     111  ByteOrder
   766     0   207    22     0    15     0     111  order
   767     0   207    27     0    15     0      59  (
   768     0   207    28     0    15     0      60  )
   769     0   207    30     0    15     0      63  {
   770     0   209     9     0    15     0      19  return
   771     0   209    16     0    15     0     111  ByteOrder.BIG_ENDIAN
   772     0   209    36     0    15     0     102  ;
   773     0   214     5     0    15     0      64  }
   774     0   214     5     0    15     0     154  ENDMETHOD
   775     0   216     1     0    -1     0      64  }
   776     0   216     1     0    -1     1     155  ENDCLASS
   777     0   216     1    -1    -1     1     156  ENDFILE D:\javasrc\java\nio\ByteBufferAsCharBufferB.java
   778     1     1     1    -1    -1     1     157  STARTFILE D:\javasrc\java\nio\ByteBufferAsFloatBufferB.java
   779     1    28     1    -1    -1     0       5  package
   780     1    28     9    -1    -1     0     111  java.nio
   781     1    28    17    -1    -1     0     102  ;
   782     1    31     1     1    -1     0     158  STARTCLASS
   783     1    31     1     1    -1     0      24  class
   784     1    31     7     1    -1     0     111  ByteBufferAsFloatBufferB
   785     1    32     5     1    -1     0      38  extends
   786     1    32    13     1    -1     0     111  FloatBuffer
   787     1    33     1     1    -1     0      63  {
   788     1    37     5     1    -1     0      23  protected
   789     1    37    15     1    -1     0       6  final
   790     1    37    21     1    -1     0     111  ByteBuffer
   791     1    37    32     1    -1     0     111  bb
   792     1    37    34     1    -1     0     102  ;
   793     1    38     5     1    -1     0      23  protected
   794     1    38    15     1    -1     0       6  final
   795     1    38    21     1    -1     0      36  int
   796     1    38    25     1    -1     0     111  offset
   797     1    38    31     1    -1     0     102  ;
   798     1    38    31     1    16     0     159  STARTMETHOD
   799     1    42     5     1    16     0     111  ByteBufferAsFloatBufferB
   800     1    42    29     1    16     0      59  (
   801     1    42    30     1    16     0     111  ByteBuffer
   802     1    42    41     1    16     0     111  bb
   803     1    42    43     1    16     0      60  )
   804     1    42    45     1    16     0      63  {
   805     1    44     9     1    16     0      27  super
   806     1    44    14     1    16     0      59  (
   807     1    44    15     1    16     0      77  -
   808     1    44    16     1    16     0     112  1
   809     1    44    17     1    16     0      66  ,
   810     1    44    19     1    16     0     112  0
   811     1    44    20     1    16     0      66  ,
   812     1    45    15     1    16     0     111  bb.remaining
   813     1    45    27     1    16     0      59  (
   814     1    45    28     1    16     0      60  )
   815     1    45    30     1    16     0      84  >>
   816     1    45    33     1    16     0     112  2
   817     1    45    34     1    16     0      66  ,
   818     1    46    15     1    16     0     111  bb.remaining
   819     1    46    27     1    16     0      59  (
   820     1    46    28     1    16     0      60  )
   821     1    46    30     1    16     0      84  >>
   822     1    46    33     1    16     0     112  2
   823     1    46    34     1    16     0      60  )
   824     1    46    35     1    16     0     102  ;
   825     1    47     9     1    16     0     111  this.bb
   826     1    47    17     1    16     0      67  =
   827     1    47    19     1    16     0     111  bb
   828     1    47    21     1    16     0     102  ;
   829     1    49     9     1    16     0      36  int
   830     1    49    13     1    16     0     111  cap
   831     1    49    17     1    16     0      67  =
   832     1    49    19     1    16     0     111  this.capacity
   833     1    49    32     1    16     0      59  (
   834     1    49    33     1    16     0      60  )
   835     1    49    34     1    16     0     102  ;
   836     1    50     9     1    16     0     111  this.limit
   837     1    50    19     1    16     0      59  (
   838     1    50    20     1    16     0     111  cap
   839     1    50    23     1    16     0      60  )
   840     1    50    24     1    16     0     102  ;
   841     1    51     9     1    16     0      36  int
   842     1    51    13     1    16     0     111  pos
   843     1    51    17     1    16     0      67  =
   844     1    51    19     1    16     0     111  this.position
   845     1    51    32     1    16     0      59  (
   846     1    51    33     1    16     0      60  )
   847     1    51    34     1    16     0     102  ;
   848     1    52     9     1    16     0     111  assert
   849     1    52    16     1    16     0      59  (
   850     1    52    17     1    16     0     111  pos
   851     1    52    21     1    16     0      92  <=
   852     1    52    24     1    16     0     111  cap
   853     1    52    27     1    16     0      60  )
   854     1    52    28     1    16     0     102  ;
   855     1    53     9     1    16     0     111  offset
   856     1    53    16     1    16     0      67  =
   857     1    53    18     1    16     0     111  pos
   858     1    53    21     1    16     0     102  ;
   859     1    57     5     1    16     0      64  }
   860     1    57     5     1    16     0     160  ENDMETHOD
   861     1    57     5     1    17     0     161  STARTMETHOD
   862     1    59     5     1    17     0     111  ByteBufferAsFloatBufferB
   863     1    59    29     1    17     0      59  (
   864     1    59    30     1    17     0     111  ByteBuffer
   865     1    59    41     1    17     0     111  bb
   866     1    59    43     1    17     0      66  ,
   867     1    60    38     1    17     0      36  int
   868     1    60    42     1    17     0     111  mark
   869     1    60    46     1    17     0      66  ,
   870     1    60    48     1    17     0      36  int
   871     1    60    52     1    17     0     111  pos
   872     1    60    55     1    17     0      66  ,
   873     1    60    57     1    17     0      36  int
   874     1    60    61     1    17     0     111  lim
   875     1    60    64     1    17     0      66  ,
   876     1    60    66     1    17     0      36  int
   877     1    60    70     1    17     0     111  cap
   878     1    60    73     1    17     0      66  ,
   879     1    61    38     1    17     0      36  int
   880     1    61    42     1    17     0     111  off
   881     1    61    45     1    17     0      60  )
   882     1    62     5     1    17     0      63  {
   883     1    64     9     1    17     0      27  super
   884     1    64    14     1    17     0      59  (
   885     1    64    15     1    17     0     111  mark
   886     1    64    19     1    17     0      66  ,
   887     1    64    21     1    17     0     111  pos
   888     1    64    24     1    17     0      66  ,
   889     1    64    26     1    17     0     111  lim
   890     1    64    29     1    17     0      66  ,
   891     1    64    31     1    17     0     111  cap
   892     1    64    34     1    17     0      60  )
   893     1    64    35     1    17     0     102  ;
   894     1    65     9     1    17     1     111  this.bb
   895     1    65    17     1    17     1      67  =
   896     1    65    19     1    17     1     111  bb
   897     1    65    21     1    17     1     102  ;
   898     1    66     9     1    17     1     111  offset
   899     1    66    16     1    17     1      67  =
   900     1    66    18     1    17     1     111  off
   901     1    66    21     1    17     1     102  ;
   902     1    70     5     1    17     0      64  }
   903     1    70     5     1    17     0     162  ENDMETHOD
   904     1    70     5     1    18     0     163  STARTMETHOD
   905     1    72     5     1    18     0      10  public
   906     1    72    12     1    18     0     111  FloatBuffer
   907     1    72    24     1    18     0     111  slice
   908     1    72    29     1    18     0      59  (
   909     1    72    30     1    18     0      60  )
   910     1    72    32     1    18     0      63  {
   911     1    73     9     1    18     1      36  int
   912     1    73    13     1    18     1     111  pos
   913     1    73    17     1    18     1      67  =
   914     1    73    19     1    18     1     111  this.position
   915     1    73    32     1    18     1      59  (
   916     1    73    33     1    18     1      60  )
   917     1    73    34     1    18     1     102  ;
   918     1    74     9     1    18     1      36  int
   919     1    74    13     1    18     1     111  lim
   920     1    74    17     1    18     1      67  =
   921     1    74    19     1    18     1     111  this.limit
   922     1    74    29     1    18     1      59  (
   923     1    74    30     1    18     1      60  )
   924     1    74    31     1    18     1     102  ;
   925     1    75     9     1    18     0     111  assert
   926     1    75    16     1    18     0      59  (
   927     1    75    17     1    18     0     111  pos
   928     1    75    21     1    18     0      92  <=
   929     1    75    24     1    18     0     111  lim
   930     1    75    27     1    18     0      60  )
   931     1    75    28     1    18     0     102  ;
   932     1    76     9     1    18     0      36  int
   933     1    76    13     1    18     0     111  rem
   934     1    76    17     1    18     0      67  =
   935     1    76    19     1    18     0      59  (
   936     1    76    20     1    18     0     111  pos
   937     1    76    24     1    18     0      92  <=
   938     1    76    27     1    18     0     111  lim
   939     1    76    31     1    18     0      58  ?
   940     1    76    33     1    18     0     111  lim
   941     1    76    37     1    18     0      77  -
   942     1    76    39     1    18     0     111  pos
   943     1    76    43     1    18     0      65  :
   944     1    76    45     1    18     0     112  0
   945     1    76    46     1    18     0      60  )
   946     1    76    47     1    18     0     102  ;
   947     1    77     9     1    18     0      36  int
   948     1    77    13     1    18     0     111  off
   949     1    77    17     1    18     0      67  =
   950     1    77    19     1    18     0      59  (
   951     1    77    20     1    18     0     111  pos
   952     1    77    24     1    18     0      90  <<
   953     1    77    27     1    18     0     112  2
   954     1    77    28     1    18     0      60  )
   955     1    77    30     1    18     0      74  +
   956     1    77    32     1    18     0     111  offset
   957     1    77    38     1    18     0     102  ;
   958     1    78     9     1    18     0     111  assert
   959     1    78    16     1    18     0      59  (
   960     1    78    17     1    18     0     111  off
   961     1    78    21     1    18     0      88  >=
   962     1    78    24     1    18     0     112  0
   963     1    78    25     1    18     0      60  )
   964     1    78    26     1    18     0     102  ;
   965     1    79     9     1    18     0      19  return
   966     1    79    16     1    18     0      15  new
   967     1    79    20     1    18     0     111  ByteBufferAsFloatBufferB
   968     1    79    44     1    18     0      59  (
   969     1    79    45     1    18     0     111  bb
   970     1    79    47     1    18     0      66  ,
   971     1    79    49     1    18     0      77  -
   972     1    79    50     1    18     0     112  1
   973     1    79    51     1    18     0      66  ,
   974     1    79    53     1    18     0     112  0
   975     1    79    54     1    18     0      66  ,
   976     1    79    56     1    18     0     111  rem
   977     1    79    59     1    18     0      66  ,
   978     1    79    61     1    18     0     111  rem
   979     1    79    64     1    18     1      66  ,
   980     1    79    66     1    18     1     111  off
   981     1    79    69     1    18     1      60  )
   982     1    79    70     1    18     1     102  ;
   983     1    80     5     1    18     1      64  }
   984     1    80     5     1    18     0     164  ENDMETHOD
   985     1    80     5     1    19     0     165  STARTMETHOD
   986     1    82     5     1    19     0      10  public
   987     1    82    12     1    19     0     111  FloatBuffer
   988     1    82    24     1    19     0     111  duplicate
   989     1    82    33     1    19     0      59  (
   990     1    82    34     1    19     0      60  )
   991     1    82    36     1    19     0      63  {
   992     1    83     9     1    19     0      19  return
   993     1    83    16     1    19     0      15  new
   994     1    83    20     1    19     0     111  ByteBufferAsFloatBufferB
   995     1    83    44     1    19     0      59  (
   996     1    83    45     1    19     0     111  bb
   997     1    83    47     1    19     0      66  ,
   998     1    84    53     1    19     1     111  this.markValue
   999     1    84    67     1    19     1      59  (
  1000     1    84    68     1    19     1      60  )
  1001     1    84    69     1    19     1      66  ,
  1002     1    85    53     1    19     1     111  this.position
  1003     1    85    66     1    19     1      59  (
  1004     1    85    67     1    19     1      60  )
  1005     1    85    68     1    19     1      66  ,
  1006     1    86    53     1    19     1     111  this.limit
  1007     1    86    63     1    19     1      59  (
  1008     1    86    64     1    19     1      60  )
  1009     1    86    65     1    19     1      66  ,
  1010     1    87    53     1    19     1     111  this.capacity
  1011     1    87    66     1    19     1      59  (
  1012     1    87    67     1    19     1      60  )
  1013     1    87    68     1    19     1      66  ,
  1014     1    88    53     1    19     1     111  offset
  1015     1    88    59     1    19     1      60  )
  1016     1    88    60     1    19     1     102  ;
  1017     1    89     5     1    19     1      64  }
  1018     1    89     5     1    19     0     166  ENDMETHOD
  1019     1    89     5     1    20     0     167  STARTMETHOD
  1020     1    91     5     1    20     0      10  public
  1021     1    91    12     1    20     0     111  FloatBuffer
  1022     1    91    24     1    20     0     111  asReadOnlyBuffer
  1023     1    91    40     1    20     0      59  (
  1024     1    91    41     1    20     0      60  )
  1025     1    91    43     1    20     0      63  {
  1026     1    93     9     1    20     0      19  return
  1027     1    93    16     1    20     0      15  new
  1028     1    93    20     1    20     0     111  ByteBufferAsFloatBufferRB
  1029     1    93    45     1    20     0      59  (
  1030     1    93    46     1    20     0     111  bb
  1031     1    93    48     1    20     0      66  ,
  1032     1    94    50     1    20     1     111  this.markValue
  1033     1    94    64     1    20     1      59  (
  1034     1    94    65     1    20     1      60  )
  1035     1    94    66     1    20     1      66  ,
  1036     1    95    50     1    20     1     111  this.position
  1037     1    95    63     1    20     1      59  (
  1038     1    95    64     1    20     1      60  )
  1039     1    95    65     1    20     1      66  ,
  1040     1    96    50     1    20     1     111  this.limit
  1041     1    96    60     1    20     1      59  (
  1042     1    96    61     1    20     1      60  )
  1043     1    96    62     1    20     1      66  ,
  1044     1    97    50     1    20     1     111  this.capacity
  1045     1    97    63     1    20     1      59  (
  1046     1    97    64     1    20     1      60  )
  1047     1    97    65     1    20     1      66  ,
  1048     1    98    50     1    20     1     111  offset
  1049     1    98    56     1    20     1      60  )
  1050     1    98    57     1    20     1     102  ;
  1051     1   102     5     1    20     1      64  }
  1052     1   102     5     1    20     0     168  ENDMETHOD
  1053     1   102     5     1    21     0     169  STARTMETHOD
  1054     1   106     5     1    21     0      23  protected
  1055     1   106    15     1    21     0      36  int
  1056     1   106    19     1    21     0     111  ix
  1057     1   106    21     1    21     0      59  (
  1058     1   106    22     1    21     0      36  int
  1059     1   106    26     1    21     0     111  i
  1060     1   106    27     1    21     0      60  )
  1061     1   106    29     1    21     0      63  {
  1062     1   107     9     1    21     0      19  return
  1063     1   107    16     1    21     0      59  (
  1064     1   107    17     1    21     0     111  i
  1065     1   107    19     1    21     0      90  <<
  1066     1   107    22     1    21     0     112  2
  1067     1   107    23     1    21     0      60  )
  1068     1   107    25     1    21     0      74  +
  1069     1   107    27     1    21     0     111  offset
  1070     1   107    33     1    21     0     102  ;
  1071     1   108     5     1    21     0      64  }
  1072     1   108     5     1    21     0     170  ENDMETHOD
  1073     1   108     5     1    22     0     171  STARTMETHOD
  1074     1   110     5     1    22     0      10  public
  1075     1   110    12     1    22     0       4  float
  1076     1   110    18     1    22     0     111  get
  1077     1   110    21     1    22     0      59  (
  1078     1   110    22     1    22     0      60  )
  1079     1   110    24     1    22     0      63  {
  1080     1   111     9     1    22     0      19  return
  1081     1   111    16     1    22     0     111  Bits.getFloatB
  1082     1   111    30     1    22     0      59  (
  1083     1   111    31     1    22     0     111  bb
  1084     1   111    33     1    22     0      66  ,
  1085     1   111    35     1    22     0     111  ix
  1086     1   111    37     1    22     0      59  (
  1087     1   111    38     1    22     0     111  nextGetIndex
  1088     1   111    50     1    22     0      59  (
  1089     1   111    51     1    22     0      60  )
  1090     1   111    52     1    22     0      60  )
  1091     1   111    53     1    22     0      60  )
  1092     1   111    54     1    22     0     102  ;
  1093     1   112     5     1    22     0      64  }
  1094     1   112     5     1    22     0     172  ENDMETHOD
  1095     1   112     5     1    23     0     173  STARTMETHOD
  1096     1   114     5     1    23     0      10  public
  1097     1   114    12     1    23     0       4  float
  1098     1   114    18     1    23     0     111  get
  1099     1   114    21     1    23     0      59  (
  1100     1   114    22     1    23     0      36  int
  1101     1   114    26     1    23     0     111  i
  1102     1   114    27     1    23     0      60  )
  1103     1   114    29     1    23     0      63  {
  1104     1   115     9     1    23     0      19  return
  1105     1   115    16     1    23     0     111  Bits.getFloatB
  1106     1   115    30     1    23     0      59  (
  1107     1   115    31     1    23     0     111  bb
  1108     1   115    33     1    23     0      66  ,
  1109     1   115    35     1    23     0     111  ix
  1110     1   115    37     1    23     0      59  (
  1111     1   115    38     1    23     0     111  checkIndex
  1112     1   115    48     1    23     0      59  (
  1113     1   115    49     1    23     0     111  i
  1114     1   115    50     1    23     0      60  )
  1115     1   115    51     1    23     0      60  )
  1116     1   115    52     1    23     0      60  )
  1117     1   115    53     1    23     0     102  ;
  1118     1   116     5     1    23     0      64  }
  1119     1   116     5     1    23     0     174  ENDMETHOD
  1120     1   116     5     1    24     0     175  STARTMETHOD
  1121     1   120     5     1    24     0      10  public
  1122     1   120    12     1    24     0     111  FloatBuffer
  1123     1   120    24     1    24     0     111  put
  1124     1   120    27     1    24     0      59  (
  1125     1   120    28     1    24     0       4  float
  1126     1   120    34     1    24     0     111  x
  1127     1   120    35     1    24     0      60  )
  1128     1   120    37     1    24     0      63  {
  1129     1   122     9     1    24     0     111  Bits.putFloatB
  1130     1   122    23     1    24     0      59  (
  1131     1   122    24     1    24     0     111  bb
  1132     1   122    26     1    24     0      66  ,
  1133     1   122    28     1    24     0     111  ix
  1134     1   122    30     1    24     0      59  (
  1135     1   122    31     1    24     0     111  nextPutIndex
  1136     1   122    43     1    24     0      59  (
  1137     1   122    44     1    24     0      60  )
  1138     1   122    45     1    24     0      60  )
  1139     1   122    46     1    24     0      66  ,
  1140     1   122    48     1    24     0     111  x
  1141     1   122    49     1    24     0      60  )
  1142     1   122    50     1    24     0     102  ;
  1143     1   123     9     1    24     0      19  return
  1144     1   123    16     1    24     0      44  this
  1145     1   123    20     1    24     0     102  ;
  1146     1   127     5     1    24     0      64  }
  1147     1   127     5     1    24     0     176  ENDMETHOD
  1148     1   127     5     1    25     0     177  STARTMETHOD
  1149     1   129     5     1    25     0      10  public
  1150     1   129    12     1    25     0     111  FloatBuffer
  1151     1   129    24     1    25     0     111  put
  1152     1   129    27     1    25     0      59  (
  1153     1   129    28     1    25     0      36  int
  1154     1   129    32     1    25     0     111  i
  1155     1   129    33     1    25     0      66  ,
  1156     1   129    35     1    25     0       4  float
  1157     1   129    41     1    25     0     111  x
  1158     1   129    42     1    25     0      60  )
  1159     1   129    44     1    25     0      63  {
  1160     1   131     9     1    25     0     111  Bits.putFloatB
  1161     1   131    23     1    25     0      59  (
  1162     1   131    24     1    25     0     111  bb
  1163     1   131    26     1    25     0      66  ,
  1164     1   131    28     1    25     0     111  ix
  1165     1   131    30     1    25     0      59  (
  1166     1   131    31     1    25     0     111  checkIndex
  1167     1   131    41     1    25     0      59  (
  1168     1   131    42     1    25     0     111  i
  1169     1   131    43     1    25     0      60  )
  1170     1   131    44     1    25     0      60  )
  1171     1   131    45     1    25     0      66  ,
  1172     1   131    47     1    25     0     111  x
  1173     1   131    48     1    25     0      60  )
  1174     1   131    49     1    25     0     102  ;
  1175     1   132     9     1    25     0      19  return
  1176     1   132    16     1    25     0      44  this
  1177     1   132    20     1    25     0     102  ;
  1178     1   136     5     1    25     0      64  }
  1179     1   136     5     1    25     0     178  ENDMETHOD
  1180     1   136     5     1    26     0     179  STARTMETHOD
  1181     1   138     5     1    26     0      10  public
  1182     1   138    12     1    26     0     111  FloatBuffer
  1183     1   138    24     1    26     0     111  compact
  1184     1   138    31     1    26     0      59  (
  1185     1   138    32     1    26     0      60  )
  1186     1   138    34     1    26     0      63  {
  1187     1   140     9     1    26     1      36  int
  1188     1   140    13     1    26     1     111  pos
  1189     1   140    17     1    26     1      67  =
  1190     1   140    19     1    26     1     111  position
  1191     1   140    27     1    26     1      59  (
  1192     1   140    28     1    26     1      60  )
  1193     1   140    29     1    26     1     102  ;
  1194     1   141     9     1    26     1      36  int
  1195     1   141    13     1    26     1     111  lim
  1196     1   141    17     1    26     1      67  =
  1197     1   141    19     1    26     1     111  limit
  1198     1   141    24     1    26     1      59  (
  1199     1   141    25     1    26     1      60  )
  1200     1   141    26     1    26     1     102  ;
  1201     1   142     9     1    26     0     111  assert
  1202     1   142    16     1    26     0      59  (
  1203     1   142    17     1    26     0     111  pos
  1204     1   142    21     1    26     0      92  <=
  1205     1   142    24     1    26     0     111  lim
  1206     1   142    27     1    26     0      60  )
  1207     1   142    28     1    26     0     102  ;
  1208     1   143     9     1    26     0      36  int
  1209     1   143    13     1    26     0     111  rem
  1210     1   143    17     1    26     0      67  =
  1211     1   143    19     1    26     0      59  (
  1212     1   143    20     1    26     0     111  pos
  1213     1   143    24     1    26     0      92  <=
  1214     1   143    27     1    26     0     111  lim
  1215     1   143    31     1    26     0      58  ?
  1216     1   143    33     1    26     0     111  lim
  1217     1   143    37     1    26     0      77  -
  1218     1   143    39     1    26     0     111  pos
  1219     1   143    43     1    26     0      65  :
  1220     1   143    45     1    26     0     112  0
  1221     1   143    46     1    26     0      60  )
  1222     1   143    47     1    26     0     102  ;
  1223     1   145     9     1    26     0     111  ByteBuffer
  1224     1   145    20     1    26     0     111  db
  1225     1   145    23     1    26     0      67  =
  1226     1   145    25     1    26     0     111  bb.duplicate
  1227     1   145    37     1    26     0      59  (
  1228     1   145    38     1    26     0      60  )
  1229     1   145    39     1    26     0     102  ;
  1230     1   146     9     1    26     0     111  db.limit
  1231     1   146    17     1    26     0      59  (
  1232     1   146    18     1    26     0     111  ix
  1233     1   146    20     1    26     0      59  (
  1234     1   146    21     1    26     0     111  lim
  1235     1   146    24     1    26     0      60  )
  1236     1   146    25     1    26     0      60  )
  1237     1   146    26     1    26     0     102  ;
  1238     1   147     9     1    26     0     111  db.position
  1239     1   147    20     1    26     0      59  (
  1240     1   147    21     1    26     0     111  ix
  1241     1   147    23     1    26     0      59  (
  1242     1   147    24     1    26     0     112  0
  1243     1   147    25     1    26     0      60  )
  1244     1   147    26     1    26     0      60  )
  1245     1   147    27     1    26     0     102  ;
  1246     1   148     9     1    26     0     111  ByteBuffer
  1247     1   148    20     1    26     0     111  sb
  1248     1   148    23     1    26     0      67  =
  1249     1   148    25     1    26     0     111  db.slice
  1250     1   148    33     1    26     0      59  (
  1251     1   148    34     1    26     0      60  )
  1252     1   148    35     1    26     0     102  ;
  1253     1   149     9     1    26     0     111  sb.position
  1254     1   149    20     1    26     0      59  (
  1255     1   149    21     1    26     0     111  pos
  1256     1   149    25     1    26     0      90  <<
  1257     1   149    28     1    26     0     112  2
  1258     1   149    29     1    26     0      60  )
  1259     1   149    30     1    26     0     102  ;
  1260     1   150     9     1    26     0     111  sb.compact
  1261     1   150    19     1    26     0      59  (
  1262     1   150    20     1    26     0      60  )
  1263     1   150    21     1    26     0     102  ;
  1264     1   151     9     1    26     0     111  position
  1265     1   151    17     1    26     0      59  (
  1266     1   151    18     1    26     0     111  rem
  1267     1   151    21     1    26     0      60  )
  1268     1   151    22     1    26     0     102  ;
  1269     1   152     9     1    26     0     111  limit
  1270     1   152    14     1    26     0      59  (
  1271     1   152    15     1    26     0     111  capacity
  1272     1   152    23     1    26     0      59  (
  1273     1   152    24     1    26     0      60  )
  1274     1   152    25     1    26     0      60  )
  1275     1   152    26     1    26     0     102  ;
  1276     1   153     9     1    26     0      19  return
  1277     1   153    16     1    26     0      44  this
  1278     1   153    20     1    26     0     102  ;
  1279     1   157     5     1    26     0      64  }
  1280     1   157     5     1    26     0     180  ENDMETHOD
  1281     1   157     5     1    27     0     181  STARTMETHOD
  1282     1   159     5     1    27     0      10  public
  1283     1   159    12     1    27     0      39  boolean
  1284     1   159    20     1    27     0     111  isDirect
  1285     1   159    28     1    27     0      59  (
  1286     1   159    29     1    27     0      60  )
  1287     1   159    31     1    27     0      63  {
  1288     1   160     9     1    27     0      19  return
  1289     1   160    16     1    27     0     111  bb.isDirect
  1290     1   160    27     1    27     0      59  (
  1291     1   160    28     1    27     0      60  )
  1292     1   160    29     1    27     1     102  ;
  1293     1   161     5     1    27     1      64  }
  1294     1   161     5     1    27     0     182  ENDMETHOD
  1295     1   161     5     1    28     0     183  STARTMETHOD
  1296     1   163     5     1    28     0      10  public
  1297     1   163    12     1    28     0      39  boolean
  1298     1   163    20     1    28     0     111  isReadOnly
  1299     1   163    30     1    28     0      59  (
  1300     1   163    31     1    28     0      60  )
  1301     1   163    33     1    28     0      63  {
  1302     1   164     9     1    28     0      19  return
  1303     1   164    16     1    28     0      43  false
  1304     1   164    21     1    28     1     102  ;
  1305     1   165     5     1    28     1      64  }
  1306     1   165     5     1    28     0     184  ENDMETHOD
  1307     1   165     5     1    29     0     185  STARTMETHOD
  1308     1   207     5     1    29     0      10  public
  1309     1   207    12     1    29     0     111  ByteOrder
  1310     1   207    22     1    29     0     111  order
  1311     1   207    27     1    29     0      59  (
  1312     1   207    28     1    29     0      60  )
  1313     1   207    30     1    29     0      63  {
  1314     1   209     9     1    29     0      19  return
  1315     1   209    16     1    29     0     111  ByteOrder.BIG_ENDIAN
  1316     1   209    36     1    29     1     102  ;
  1317     1   214     5     1    29     1      64  }
  1318     1   214     5     1    29     0     186  ENDMETHOD
  1319     1   216     1     1    -1     0      64  }
  1320     1   216     1     1    -1     1     187  ENDCLASS
  1321     1   216     1    -1    -1     1     188  ENDFILE D:\javasrc\java\nio\ByteBufferAsFloatBufferB.java
  1322     2     1     1    -1    -1     1     189  STARTFILE D:\javasrc\java\nio\ByteBufferAsIntBufferB.java
  1323     2    28     1    -1    -1     0       5  package
  1324     2    28     9    -1    -1     0     111  java.nio
  1325     2    28    17    -1    -1     0     102  ;
  1326     2    31     1     2    -1     0     190  STARTCLASS
  1327     2    31     1     2    -1     0      24  class
  1328     2    31     7     2    -1     0     111  ByteBufferAsIntBufferB
  1329     2    32     5     2    -1     0      38  extends
  1330     2    32    13     2    -1     0     111  IntBuffer
  1331     2    33     1     2    -1     0      63  {
  1332     2    37     5     2    -1     0      23  protected
  1333     2    37    15     2    -1     0       6  final
  1334     2    37    21     2    -1     0     111  ByteBuffer
  1335     2    37    32     2    -1     0     111  bb
  1336     2    37    34     2    -1     0     102  ;
  1337     2    38     5     2    -1     0      23  protected
  1338     2    38    15     2    -1     0       6  final
  1339     2    38    21     2    -1     0      36  int
  1340     2    38    25     2    -1     0     111  offset
  1341     2    38    31     2    -1     0     102  ;
  1342     2    38    31     2    30     0     191  STARTMETHOD
  1343     2    42     5     2    30     0     111  ByteBufferAsIntBufferB
  1344     2    42    27     2    30     0      59  (
  1345     2    42    28     2    30     0     111  ByteBuffer
  1346     2    42    39     2    30     0     111  bb
  1347     2    42    41     2    30     0      60  )
  1348     2    42    43     2    30     0      63  {
  1349     2    44     9     2    30     0      27  super
  1350     2    44    14     2    30     0      59  (
  1351     2    44    15     2    30     0      77  -
  1352     2    44    16     2    30     0     112  1
  1353     2    44    17     2    30     0      66  ,
  1354     2    44    19     2    30     0     112  0
  1355     2    44    20     2    30     0      66  ,
  1356     2    45    15     2    30     0     111  bb.remaining
  1357     2    45    27     2    30     0      59  (
  1358     2    45    28     2    30     0      60  )
  1359     2    45    30     2    30     0      84  >>
  1360     2    45    33     2    30     0     112  2
  1361     2    45    34     2    30     0      66  ,
  1362     2    46    15     2    30     0     111  bb.remaining
  1363     2    46    27     2    30     0      59  (
  1364     2    46    28     2    30     0      60  )
  1365     2    46    30     2    30     0      84  >>
  1366     2    46    33     2    30     0     112  2
  1367     2    46    34     2    30     0      60  )
  1368     2    46    35     2    30     0     102  ;
  1369     2    47     9     2    30     0     111  this.bb
  1370     2    47    17     2    30     0      67  =
  1371     2    47    19     2    30     0     111  bb
  1372     2    47    21     2    30     0     102  ;
  1373     2    49     9     2    30     0      36  int
  1374     2    49    13     2    30     0     111  cap
  1375     2    49    17     2    30     0      67  =
  1376     2    49    19     2    30     0     111  this.capacity
  1377     2    49    32     2    30     0      59  (
  1378     2    49    33     2    30     0      60  )
  1379     2    49    34     2    30     0     102  ;
  1380     2    50     9     2    30     0     111  this.limit
  1381     2    50    19     2    30     0      59  (
  1382     2    50    20     2    30     0     111  cap
  1383     2    50    23     2    30     0      60  )
  1384     2    50    24     2    30     0     102  ;
  1385     2    51     9     2    30     0      36  int
  1386     2    51    13     2    30     0     111  pos
  1387     2    51    17     2    30     0      67  =
  1388     2    51    19     2    30     0     111  this.position
  1389     2    51    32     2    30     0      59  (
  1390     2    51    33     2    30     0      60  )
  1391     2    51    34     2    30     0     102  ;
  1392     2    52     9     2    30     0     111  assert
  1393     2    52    16     2    30     0      59  (
  1394     2    52    17     2    30     0     111  pos
  1395     2    52    21     2    30     0      92  <=
  1396     2    52    24     2    30     0     111  cap
  1397     2    52    27     2    30     0      60  )
  1398     2    52    28     2    30     0     102  ;
  1399     2    53     9     2    30     0     111  offset
  1400     2    53    16     2    30     0      67  =
  1401     2    53    18     2    30     0     111  pos
  1402     2    53    21     2    30     0     102  ;
  1403     2    57     5     2    30     0      64  }
  1404     2    57     5     2    30     0     192  ENDMETHOD
  1405     2    57     5     2    31     0     193  STARTMETHOD
  1406     2    59     5     2    31     0     111  ByteBufferAsIntBufferB
  1407     2    59    27     2    31     0      59  (
  1408     2    59    28     2    31     0     111  ByteBuffer
  1409     2    59    39     2    31     0     111  bb
  1410     2    59    41     2    31     0      66  ,
  1411     2    60    38     2    31     0      36  int
  1412     2    60    42     2    31     0     111  mark
  1413     2    60    46     2    31     0      66  ,
  1414     2    60    48     2    31     0      36  int
  1415     2    60    52     2    31     0     111  pos
  1416     2    60    55     2    31     0      66  ,
  1417     2    60    57     2    31     0      36  int
  1418     2    60    61     2    31     0     111  lim
  1419     2    60    64     2    31     0      66  ,
  1420     2    60    66     2    31     0      36  int
  1421     2    60    70     2    31     0     111  cap
  1422     2    60    73     2    31     0      66  ,
  1423     2    61    38     2    31     0      36  int
  1424     2    61    42     2    31     0     111  off
  1425     2    61    45     2    31     0      60  )
  1426     2    62     5     2    31     0      63  {
  1427     2    64     9     2    31     0      27  super
  1428     2    64    14     2    31     0      59  (
  1429     2    64    15     2    31     0     111  mark
  1430     2    64    19     2    31     0      66  ,
  1431     2    64    21     2    31     0     111  pos
  1432     2    64    24     2    31     0      66  ,
  1433     2    64    26     2    31     0     111  lim
  1434     2    64    29     2    31     0      66  ,
  1435     2    64    31     2    31     0     111  cap
  1436     2    64    34     2    31     0      60  )
  1437     2    64    35     2    31     0     102  ;
  1438     2    65     9     2    31     1     111  this.bb
  1439     2    65    17     2    31     1      67  =
  1440     2    65    19     2    31     1     111  bb
  1441     2    65    21     2    31     1     102  ;
  1442     2    66     9     2    31     1     111  offset
  1443     2    66    16     2    31     1      67  =
  1444     2    66    18     2    31     1     111  off
  1445     2    66    21     2    31     1     102  ;
  1446     2    70     5     2    31     0      64  }
  1447     2    70     5     2    31     0     194  ENDMETHOD
  1448     2    70     5     2    32     0     195  STARTMETHOD
  1449     2    72     5     2    32     0      10  public
  1450     2    72    12     2    32     0     111  IntBuffer
  1451     2    72    22     2    32     0     111  slice
  1452     2    72    27     2    32     0      59  (
  1453     2    72    28     2    32     0      60  )
  1454     2    72    30     2    32     0      63  {
  1455     2    73     9     2    32     1      36  int
  1456     2    73    13     2    32     1     111  pos
  1457     2    73    17     2    32     1      67  =
  1458     2    73    19     2    32     1     111  this.position
  1459     2    73    32     2    32     1      59  (
  1460     2    73    33     2    32     1      60  )
  1461     2    73    34     2    32     1     102  ;
  1462     2    74     9     2    32     1      36  int
  1463     2    74    13     2    32     1     111  lim
  1464     2    74    17     2    32     1      67  =
  1465     2    74    19     2    32     1     111  this.limit
  1466     2    74    29     2    32     1      59  (
  1467     2    74    30     2    32     1      60  )
  1468     2    74    31     2    32     1     102  ;
  1469     2    75     9     2    32     0     111  assert
  1470     2    75    16     2    32     0      59  (
  1471     2    75    17     2    32     0     111  pos
  1472     2    75    21     2    32     0      92  <=
  1473     2    75    24     2    32     0     111  lim
  1474     2    75    27     2    32     0      60  )
  1475     2    75    28     2    32     0     102  ;
  1476     2    76     9     2    32     0      36  int
  1477     2    76    13     2    32     0     111  rem
  1478     2    76    17     2    32     0      67  =
  1479     2    76    19     2    32     0      59  (
  1480     2    76    20     2    32     0     111  pos
  1481     2    76    24     2    32     0      92  <=
  1482     2    76    27     2    32     0     111  lim
  1483     2    76    31     2    32     0      58  ?
  1484     2    76    33     2    32     0     111  lim
  1485     2    76    37     2    32     0      77  -
  1486     2    76    39     2    32     0     111  pos
  1487     2    76    43     2    32     0      65  :
  1488     2    76    45     2    32     0     112  0
  1489     2    76    46     2    32     0      60  )
  1490     2    76    47     2    32     0     102  ;
  1491     2    77     9     2    32     0      36  int
  1492     2    77    13     2    32     0     111  off
  1493     2    77    17     2    32     0      67  =
  1494     2    77    19     2    32     0      59  (
  1495     2    77    20     2    32     0     111  pos
  1496     2    77    24     2    32     0      90  <<
  1497     2    77    27     2    32     0     112  2
  1498     2    77    28     2    32     0      60  )
  1499     2    77    30     2    32     0      74  +
  1500     2    77    32     2    32     0     111  offset
  1501     2    77    38     2    32     0     102  ;
  1502     2    78     9     2    32     0     111  assert
  1503     2    78    16     2    32     0      59  (
  1504     2    78    17     2    32     0     111  off
  1505     2    78    21     2    32     0      88  >=
  1506     2    78    24     2    32     0     112  0
  1507     2    78    25     2    32     0      60  )
  1508     2    78    26     2    32     0     102  ;
  1509     2    79     9     2    32     0      19  return
  1510     2    79    16     2    32     0      15  new
  1511     2    79    20     2    32     0     111  ByteBufferAsIntBufferB
  1512     2    79    42     2    32     0      59  (
  1513     2    79    43     2    32     0     111  bb
  1514     2    79    45     2    32     0      66  ,
  1515     2    79    47     2    32     0      77  -
  1516     2    79    48     2    32     0     112  1
  1517     2    79    49     2    32     0      66  ,
  1518     2    79    51     2    32     0     112  0
  1519     2    79    52     2    32     0      66  ,
  1520     2    79    54     2    32     0     111  rem
  1521     2    79    57     2    32     0      66  ,
  1522     2    79    59     2    32     0     111  rem
  1523     2    79    62     2    32     1      66  ,
  1524     2    79    64     2    32     1     111  off
  1525     2    79    67     2    32     1      60  )
  1526     2    79    68     2    32     1     102  ;
  1527     2    80     5     2    32     1      64  }
  1528     2    80     5     2    32     0     196  ENDMETHOD
  1529     2    80     5     2    33     0     197  STARTMETHOD
  1530     2    82     5     2    33     0      10  public
  1531     2    82    12     2    33     0     111  IntBuffer
  1532     2    82    22     2    33     0     111  duplicate
  1533     2    82    31     2    33     0      59  (
  1534     2    82    32     2    33     0      60  )
  1535     2    82    34     2    33     0      63  {
  1536     2    83     9     2    33     0      19  return
  1537     2    83    16     2    33     0      15  new
  1538     2    83    20     2    33     0     111  ByteBufferAsIntBufferB
  1539     2    83    42     2    33     0      59  (
  1540     2    83    43     2    33     0     111  bb
  1541     2    83    45     2    33     0      66  ,
  1542     2    84    53     2    33     1     111  this.markValue
  1543     2    84    67     2    33     1      59  (
  1544     2    84    68     2    33     1      60  )
  1545     2    84    69     2    33     1      66  ,
  1546     2    85    53     2    33     1     111  this.position
  1547     2    85    66     2    33     1      59  (
  1548     2    85    67     2    33     1      60  )
  1549     2    85    68     2    33     1      66  ,
  1550     2    86    53     2    33     1     111  this.limit
  1551     2    86    63     2    33     1      59  (
  1552     2    86    64     2    33     1      60  )
  1553     2    86    65     2    33     1      66  ,
  1554     2    87    53     2    33     1     111  this.capacity
  1555     2    87    66     2    33     1      59  (
  1556     2    87    67     2    33     1      60  )
  1557     2    87    68     2    33     1      66  ,
  1558     2    88    53     2    33     1     111  offset
  1559     2    88    59     2    33     1      60  )
  1560     2    88    60     2    33     1     102  ;
  1561     2    89     5     2    33     1      64  }
  1562     2    89     5     2    33     0     198  ENDMETHOD
  1563     2    89     5     2    34     0     199  STARTMETHOD
  1564     2    91     5     2    34     0      10  public
  1565     2    91    12     2    34     0     111  IntBuffer
  1566     2    91    22     2    34     0     111  asReadOnlyBuffer
  1567     2    91    38     2    34     0      59  (
  1568     2    91    39     2    34     0      60  )
  1569     2    91    41     2    34     0      63  {
  1570     2    93     9     2    34     0      19  return
  1571     2    93    16     2    34     0      15  new
  1572     2    93    20     2    34     0     111  ByteBufferAsIntBufferRB
  1573     2    93    43     2    34     0      59  (
  1574     2    93    44     2    34     0     111  bb
  1575     2    93    46     2    34     0      66  ,
  1576     2    94    50     2    34     1     111  this.markValue
  1577     2    94    64     2    34     1      59  (
  1578     2    94    65     2    34     1      60  )
  1579     2    94    66     2    34     1      66  ,
  1580     2    95    50     2    34     1     111  this.position
  1581     2    95    63     2    34     1      59  (
  1582     2    95    64     2    34     1      60  )
  1583     2    95    65     2    34     1      66  ,
  1584     2    96    50     2    34     1     111  this.limit
  1585     2    96    60     2    34     1      59  (
  1586     2    96    61     2    34     1      60  )
  1587     2    96    62     2    34     1      66  ,
  1588     2    97    50     2    34     1     111  this.capacity
  1589     2    97    63     2    34     1      59  (
  1590     2    97    64     2    34     1      60  )
  1591     2    97    65     2    34     1      66  ,
  1592     2    98    50     2    34     1     111  offset
  1593     2    98    56     2    34     1      60  )
  1594     2    98    57     2    34     1     102  ;
  1595     2   102     5     2    34     1      64  }
  1596     2   102     5     2    34     0     200  ENDMETHOD
  1597     2   102     5     2    35     0     201  STARTMETHOD
  1598     2   106     5     2    35     0      23  protected
  1599     2   106    15     2    35     0      36  int
  1600     2   106    19     2    35     0     111  ix
  1601     2   106    21     2    35     0      59  (
  1602     2   106    22     2    35     0      36  int
  1603     2   106    26     2    35     0     111  i
  1604     2   106    27     2    35     0      60  )
  1605     2   106    29     2    35     0      63  {
  1606     2   107     9     2    35     0      19  return
  1607     2   107    16     2    35     0      59  (
  1608     2   107    17     2    35     0     111  i
  1609     2   107    19     2    35     0      90  <<
  1610     2   107    22     2    35     0     112  2
  1611     2   107    23     2    35     0      60  )
  1612     2   107    25     2    35     0      74  +
  1613     2   107    27     2    35     0     111  offset
  1614     2   107    33     2    35     0     102  ;
  1615     2   108     5     2    35     0      64  }
  1616     2   108     5     2    35     0     202  ENDMETHOD
  1617     2   108     5     2    36     0     203  STARTMETHOD
  1618     2   110     5     2    36     0      10  public
  1619     2   110    12     2    36     0      36  int
  1620     2   110    16     2    36     0     111  get
  1621     2   110    19     2    36     0      59  (
  1622     2   110    20     2    36     0      60  )
  1623     2   110    22     2    36     0      63  {
  1624     2   111     9     2    36     0      19  return
  1625     2   111    16     2    36     0     111  Bits.getIntB
  1626     2   111    28     2    36     0      59  (
  1627     2   111    29     2    36     0     111  bb
  1628     2   111    31     2    36     0      66  ,
  1629     2   111    33     2    36     0     111  ix
  1630     2   111    35     2    36     0      59  (
  1631     2   111    36     2    36     0     111  nextGetIndex
  1632     2   111    48     2    36     0      59  (
  1633     2   111    49     2    36     0      60  )
  1634     2   111    50     2    36     0      60  )
  1635     2   111    51     2    36     0      60  )
  1636     2   111    52     2    36     0     102  ;
  1637     2   112     5     2    36     0      64  }
  1638     2   112     5     2    36     0     204  ENDMETHOD
  1639     2   112     5     2    37     0     205  STARTMETHOD
  1640     2   114     5     2    37     0      10  public
  1641     2   114    12     2    37     0      36  int
  1642     2   114    16     2    37     0     111  get
  1643     2   114    19     2    37     0      59  (
  1644     2   114    20     2    37     0      36  int
  1645     2   114    24     2    37     0     111  i
  1646     2   114    25     2    37     0      60  )
  1647     2   114    27     2    37     0      63  {
  1648     2   115     9     2    37     0      19  return
  1649     2   115    16     2    37     0     111  Bits.getIntB
  1650     2   115    28     2    37     0      59  (
  1651     2   115    29     2    37     0     111  bb
  1652     2   115    31     2    37     0      66  ,
  1653     2   115    33     2    37     0     111  ix
  1654     2   115    35     2    37     0      59  (
  1655     2   115    36     2    37     0     111  checkIndex
  1656     2   115    46     2    37     0      59  (
  1657     2   115    47     2    37     0     111  i
  1658     2   115    48     2    37     0      60  )
  1659     2   115    49     2    37     0      60  )
  1660     2   115    50     2    37     0      60  )
  1661     2   115    51     2    37     0     102  ;
  1662     2   116     5     2    37     0      64  }
  1663     2   116     5     2    37     0     206  ENDMETHOD
  1664     2   116     5     2    38     0     207  STARTMETHOD
  1665     2   120     5     2    38     0      10  public
  1666     2   120    12     2    38     0     111  IntBuffer
  1667     2   120    22     2    38     0     111  put
  1668     2   120    25     2    38     0      59  (
  1669     2   120    26     2    38     0      36  int
  1670     2   120    30     2    38     0     111  x
  1671     2   120    31     2    38     0      60  )
  1672     2   120    33     2    38     0      63  {
  1673     2   122     9     2    38     0     111  Bits.putIntB
  1674     2   122    21     2    38     0      59  (
  1675     2   122    22     2    38     0     111  bb
  1676     2   122    24     2    38     0      66  ,
  1677     2   122    26     2    38     0     111  ix
  1678     2   122    28     2    38     0      59  (
  1679     2   122    29     2    38     0     111  nextPutIndex
  1680     2   122    41     2    38     0      59  (
  1681     2   122    42     2    38     0      60  )
  1682     2   122    43     2    38     0      60  )
  1683     2   122    44     2    38     0      66  ,
  1684     2   122    46     2    38     0     111  x
  1685     2   122    47     2    38     0      60  )
  1686     2   122    48     2    38     0     102  ;
  1687     2   123     9     2    38     0      19  return
  1688     2   123    16     2    38     0      44  this
  1689     2   123    20     2    38     0     102  ;
  1690     2   127     5     2    38     0      64  }
  1691     2   127     5     2    38     0     208  ENDMETHOD
  1692     2   127     5     2    39     0     209  STARTMETHOD
  1693     2   129     5     2    39     0      10  public
  1694     2   129    12     2    39     0     111  IntBuffer
  1695     2   129    22     2    39     0     111  put
  1696     2   129    25     2    39     0      59  (
  1697     2   129    26     2    39     0      36  int
  1698     2   129    30     2    39     0     111  i
  1699     2   129    31     2    39     0      66  ,
  1700     2   129    33     2    39     0      36  int
  1701     2   129    37     2    39     0     111  x
  1702     2   129    38     2    39     0      60  )
  1703     2   129    40     2    39     0      63  {
  1704     2   131     9     2    39     0     111  Bits.putIntB
  1705     2   131    21     2    39     0      59  (
  1706     2   131    22     2    39     0     111  bb
  1707     2   131    24     2    39     0      66  ,
  1708     2   131    26     2    39     0     111  ix
  1709     2   131    28     2    39     0      59  (
  1710     2   131    29     2    39     0     111  checkIndex
  1711     2   131    39     2    39     0      59  (
  1712     2   131    40     2    39     0     111  i
  1713     2   131    41     2    39     0      60  )
  1714     2   131    42     2    39     0      60  )
  1715     2   131    43     2    39     0      66  ,
  1716     2   131    45     2    39     0     111  x
  1717     2   131    46     2    39     0      60  )
  1718     2   131    47     2    39     0     102  ;
  1719     2   132     9     2    39     0      19  return
  1720     2   132    16     2    39     0      44  this
  1721     2   132    20     2    39     0     102  ;
  1722     2   136     5     2    39     0      64  }
  1723     2   136     5     2    39     0     210  ENDMETHOD
  1724     2   136     5     2    40     0     211  STARTMETHOD
  1725     2   138     5     2    40     0      10  public
  1726     2   138    12     2    40     0     111  IntBuffer
  1727     2   138    22     2    40     0     111  compact
  1728     2   138    29     2    40     0      59  (
  1729     2   138    30     2    40     0      60  )
  1730     2   138    32     2    40     0      63  {
  1731     2   140     9     2    40     1      36  int
  1732     2   140    13     2    40     1     111  pos
  1733     2   140    17     2    40     1      67  =
  1734     2   140    19     2    40     1     111  position
  1735     2   140    27     2    40     1      59  (
  1736     2   140    28     2    40     1      60  )
  1737     2   140    29     2    40     1     102  ;
  1738     2   141     9     2    40     1      36  int
  1739     2   141    13     2    40     1     111  lim
  1740     2   141    17     2    40     1      67  =
  1741     2   141    19     2    40     1     111  limit
  1742     2   141    24     2    40     1      59  (
  1743     2   141    25     2    40     1      60  )
  1744     2   141    26     2    40     1     102  ;
  1745     2   142     9     2    40     0     111  assert
  1746     2   142    16     2    40     0      59  (
  1747     2   142    17     2    40     0     111  pos
  1748     2   142    21     2    40     0      92  <=
  1749     2   142    24     2    40     0     111  lim
  1750     2   142    27     2    40     0      60  )
  1751     2   142    28     2    40     0     102  ;
  1752     2   143     9     2    40     0      36  int
  1753     2   143    13     2    40     0     111  rem
  1754     2   143    17     2    40     0      67  =
  1755     2   143    19     2    40     0      59  (
  1756     2   143    20     2    40     0     111  pos
  1757     2   143    24     2    40     0      92  <=
  1758     2   143    27     2    40     0     111  lim
  1759     2   143    31     2    40     0      58  ?
  1760     2   143    33     2    40     0     111  lim
  1761     2   143    37     2    40     0      77  -
  1762     2   143    39     2    40     0     111  pos
  1763     2   143    43     2    40     0      65  :
  1764     2   143    45     2    40     0     112  0
  1765     2   143    46     2    40     0      60  )
  1766     2   143    47     2    40     0     102  ;
  1767     2   145     9     2    40     0     111  ByteBuffer
  1768     2   145    20     2    40     0     111  db
  1769     2   145    23     2    40     0      67  =
  1770     2   145    25     2    40     0     111  bb.duplicate
  1771     2   145    37     2    40     0      59  (
  1772     2   145    38     2    40     0      60  )
  1773     2   145    39     2    40     0     102  ;
  1774     2   146     9     2    40     0     111  db.limit
  1775     2   146    17     2    40     0      59  (
  1776     2   146    18     2    40     0     111  ix
  1777     2   146    20     2    40     0      59  (
  1778     2   146    21     2    40     0     111  lim
  1779     2   146    24     2    40     0      60  )
  1780     2   146    25     2    40     0      60  )
  1781     2   146    26     2    40     0     102  ;
  1782     2   147     9     2    40     0     111  db.position
  1783     2   147    20     2    40     0      59  (
  1784     2   147    21     2    40     0     111  ix
  1785     2   147    23     2    40     0      59  (
  1786     2   147    24     2    40     0     112  0
  1787     2   147    25     2    40     0      60  )
  1788     2   147    26     2    40     0      60  )
  1789     2   147    27     2    40     0     102  ;
  1790     2   148     9     2    40     0     111  ByteBuffer
  1791     2   148    20     2    40     0     111  sb
  1792     2   148    23     2    40     0      67  =
  1793     2   148    25     2    40     0     111  db.slice
  1794     2   148    33     2    40     0      59  (
  1795     2   148    34     2    40     0      60  )
  1796     2   148    35     2    40     0     102  ;
  1797     2   149     9     2    40     0     111  sb.position
  1798     2   149    20     2    40     0      59  (
  1799     2   149    21     2    40     0     111  pos
  1800     2   149    25     2    40     0      90  <<
  1801     2   149    28     2    40     0     112  2
  1802     2   149    29     2    40     0      60  )
  1803     2   149    30     2    40     0     102  ;
  1804     2   150     9     2    40     0     111  sb.compact
  1805     2   150    19     2    40     0      59  (
  1806     2   150    20     2    40     0      60  )
  1807     2   150    21     2    40     0     102  ;
  1808     2   151     9     2    40     0     111  position
  1809     2   151    17     2    40     0      59  (
  1810     2   151    18     2    40     0     111  rem
  1811     2   151    21     2    40     0      60  )
  1812     2   151    22     2    40     0     102  ;
  1813     2   152     9     2    40     0     111  limit
  1814     2   152    14     2    40     0      59  (
  1815     2   152    15     2    40     0     111  capacity
  1816     2   152    23     2    40     0      59  (
  1817     2   152    24     2    40     0      60  )
  1818     2   152    25     2    40     0      60  )
  1819     2   152    26     2    40     0     102  ;
  1820     2   153     9     2    40     0      19  return
  1821     2   153    16     2    40     0      44  this
  1822     2   153    20     2    40     0     102  ;
  1823     2   157     5     2    40     0      64  }
  1824     2   157     5     2    40     0     212  ENDMETHOD
  1825     2   157     5     2    41     0     213  STARTMETHOD
  1826     2   159     5     2    41     0      10  public
  1827     2   159    12     2    41     0      39  boolean
  1828     2   159    20     2    41     0     111  isDirect
  1829     2   159    28     2    41     0      59  (
  1830     2   159    29     2    41     0      60  )
  1831     2   159    31     2    41     0      63  {
  1832     2   160     9     2    41     0      19  return
  1833     2   160    16     2    41     0     111  bb.isDirect
  1834     2   160    27     2    41     0      59  (
  1835     2   160    28     2    41     0      60  )
  1836     2   160    29     2    41     1     102  ;
  1837     2   161     5     2    41     1      64  }
  1838     2   161     5     2    41     0     214  ENDMETHOD
  1839     2   161     5     2    42     0     215  STARTMETHOD
  1840     2   163     5     2    42     0      10  public
  1841     2   163    12     2    42     0      39  boolean
  1842     2   163    20     2    42     0     111  isReadOnly
  1843     2   163    30     2    42     0      59  (
  1844     2   163    31     2    42     0      60  )
  1845     2   163    33     2    42     0      63  {
  1846     2   164     9     2    42     0      19  return
  1847     2   164    16     2    42     0      43  false
  1848     2   164    21     2    42     1     102  ;
  1849     2   165     5     2    42     1      64  }
  1850     2   165     5     2    42     0     216  ENDMETHOD
  1851     2   165     5     2    43     0     217  STARTMETHOD
  1852     2   207     5     2    43     0      10  public
  1853     2   207    12     2    43     0     111  ByteOrder
  1854     2   207    22     2    43     0     111  order
  1855     2   207    27     2    43     0      59  (
  1856     2   207    28     2    43     0      60  )
  1857     2   207    30     2    43     0      63  {
  1858     2   209     9     2    43     0      19  return
  1859     2   209    16     2    43     0     111  ByteOrder.BIG_ENDIAN
  1860     2   209    36     2    43     1     102  ;
  1861     2   214     5     2    43     1      64  }
  1862     2   214     5     2    43     0     218  ENDMETHOD
  1863     2   216     1     2    -1     0      64  }
  1864     2   216     1     2    -1     0     219  ENDCLASS
  1865     2   216     1    -1    -1     0     220  ENDFILE D:\javasrc\java\nio\ByteBufferAsIntBufferB.java
